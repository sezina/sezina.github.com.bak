<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | Sezina]]></title>
  <link href="http://sezina.github.com/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://sezina.github.com/"/>
  <updated>2014-02-16T09:52:27+08:00</updated>
  <id>http://sezina.github.com/</id>
  <author>
    <name><![CDATA[Sezina]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[几种遍历二叉树的方法]]></title>
    <link href="http://sezina.github.com/blog/2014/02/15/several-ways-to-traverse-a-binary-tree/"/>
    <updated>2014-02-15T19:05:00+08:00</updated>
    <id>http://sezina.github.com/blog/2014/02/15/several-ways-to-traverse-a-binary-tree</id>
    <content type="html"><![CDATA[<p>遍历二叉树是学习算法与数据结构必学的内容，在leetcode网站上有好几道相关的题，本文也是从那里引出的：</p>

<ol>
<li><a href="http://oj.leetcode.com/problems/binary-tree-preorder-traversal/">Binary Tree Preorder Traversal </a></li>
<li><a href="http://oj.leetcode.com/problems/binary-tree-inorder-traversal/">Binary Tree Inorder Traversal</a></li>
<li><a href="http://oj.leetcode.com/problems/binary-tree-postorder-traversal/">Binary Tree Postorder Traversal</a></li>
<li><a href="http://oj.leetcode.com/problems/binary-tree-level-order-traversal/">Binary Tree Level Order Traversal</a></li>
<li><a href="http://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/">Binary Tree Level Order Traversal II</a></li>
<li><a href="http://oj.leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">Binary Tree Zigzag Level Order Traversal</a></li>
</ol>


<p>以上就是leetcode上相关的题目。二叉树的先序、中序和后序遍历(对应上面的1，2，3)的递归实现非常简单。如下：</p>

<p>```cpp
void preorder(TreeNode *root)
{</p>

<pre><code>visit(root);
preorder(root-&gt;left);
preorder(root-&gt;right);
</code></pre>

<p>}</p>

<p>void inorder(TreeNode *root)
{</p>

<pre><code>inorder(root-&gt;left);
visit(root);
inorder(root-&gt;right);
</code></pre>

<p>}</p>

<p>void postorder(TreeNode *root)
{</p>

<pre><code>postorder(root-&gt;left);
postorder(root-&gt;right);
visit(root);
</code></pre>

<p>}
```</p>

<p>简单明了。但它们的迭代实现却要写上好几倍的代码。
下面根据leetcode的那几道题说说几种遍历方法的迭代实现。</p>

<h3>先序遍历的迭代实现</h3>

<p>从其递归实现中，可以清晰的找到迭代实现的思路：访问跟节点，再访问左子结点，访问完左子结点后再访问右子结点。因此，我们需要一个栈来保存右子结点。其实现比较简单，如下：</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>vector&lt;int&gt; preorderTraversal(TreeNode *root) {
    stack&lt;TreeNode*&gt; tn_stack;
    if (root != NULL) {
        tn_stack.push(root);
    }

    vector&lt;int&gt; result;
    while (!tn_stack.empty()) {
        root = tn_stack.top();
        tn_stack.pop();
        result.push_back(root-&gt;val);
        if (root-&gt;right != NULL) {
            tn_stack.push(root-&gt;right);
        }
        if (root-&gt;left != NULL) {
            tn_stack.push(root-&gt;left);
        }

    }
    return result;
}
</code></pre>

<p>};
```</p>

<h3>中序遍历的迭代实现</h3>

<p>中序遍历的迭代实现和先序的有些类似。1. 先将所有左子结点（包括最开始的根节点）入栈，2. 访问栈顶元素，3. 然后又将栈顶元素的右子结点入栈，重复1。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>vector&lt;int&gt; inorderTraversal(TreeNode *root) {
    vector&lt;int&gt; result;
    stack&lt;TreeNode*&gt; tn_stack;
    while (root != NULL || !tn_stack.empty()) {
        while (root != NULL) {
            tn_stack.push(root);
            root = root-&gt;left;
        }
        if (!tn_stack.empty()) {
            root = tn_stack.top();
            tn_stack.pop();
            result.push_back(root-&gt;val);
            root = root-&gt;right;
        }

    }
    return result;
}
</code></pre>

<p>};
```</p>

<h3>后序遍历的迭代实现</h3>

<p>后序遍历的迭代实现有点麻烦。这里需要为每个节点添加一个标记位，用于标识访问了左子结点还是右子结点，且每个节点需要入栈两次。我用个例子说明一下吧。</p>

<p>假设我们有如下的一颗二叉树：</p>

<p>```bash</p>

<h1>tree</h1>

<pre><code> 1 
/  \ 
</code></pre>

<p>   /    \
  2      3
 / \    / \
4   5  6   7
```</p>

<p>其后序遍历的结果应为<code>4526731</code>。我们用一个栈保存添加了标志位的节点。依旧是所有左节点都需要入栈。先将<code>124</code>入栈：</p>

<p><code>bash
[&lt;1, L&gt;, &lt;2, L&gt;, &lt;4, L&gt;]
</code></p>

<p>这个时候左子结点已经为NULL了，我们需要读栈了，将栈顶pop出来，即<code>&lt;4, L&gt;</code>。我们发现其标志位为<code>L</code>，现在将它置为<code>R</code>，并重新入栈，同时拿到它的右子结点，<code>4</code>的右子结点为<code>NULL</code>，所以这个时候再次读栈顶，得<code>&lt;4, R&gt;</code>，由于标志位为<code>R</code>，所以访问该节点。读下一个栈顶元素<code>&lt;2, L&gt;</code>，置标志位为<code>R</code>，重新入栈，得到其右子结点<code>5</code>，将该节点入栈<code>&lt;5, L&gt;</code>，将节点<code>5</code>得所有左子结点入栈。</p>

<p>重复做这种置标志位，入栈，重置标志位，入栈，当标识位位<code>R</code>时访问得操作，最终后序遍历完整棵树。</p>

<p>例子的栈的变化如下</p>

<p><code>bash
[&lt;1, L&gt;]
[&lt;1, L&gt;, &lt;2, L&gt;]
[&lt;1, L&gt;, &lt;2, L&gt;, &lt;4, L&gt;]
[&lt;1, L&gt;, &lt;2, L&gt;, &lt;4, R&gt;]
[&lt;1, L&gt;, &lt;2, L&gt;]
[&lt;1, L&gt;, &lt;2, R&gt;]
[&lt;1, L&gt;, &lt;2, R&gt;, &lt;5, L&gt;]
[&lt;1, L&gt;, &lt;2, R&gt;, &lt;5, R&gt;]
[&lt;1, L&gt;, &lt;2, R&gt;]
[&lt;1, L&gt;]
[&lt;1, R&gt;]
[&lt;1, R&gt;, &lt;3, L&gt;, &lt;6, L&gt;]
[&lt;1, R&gt;, &lt;3, L&gt;, &lt;6, R&gt;]
[&lt;1, R&gt;, &lt;3, L&gt;]
[&lt;1, R&gt;, &lt;3, R&gt;]
[&lt;1, R&gt;, &lt;3, R&gt;, &lt;7, L&gt;]
[&lt;1, R&gt;, &lt;3, R&gt;, &lt;7, R&gt;]
[&lt;1, R&gt;, &lt;3, R&gt;]
[&lt;1, R&gt;]
[]
</code></p>

<p>实现如下：</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>vector&lt;int&gt; postorderTraversal(TreeNode *root) {
    pair&lt;TreeNode *, char&gt; node_with_flag;
    stack&lt;pair&lt;TreeNode *, char&gt;&gt; s;
    vector&lt;int&gt; result;
    TreeNode *node = root;
    if (root == NULL) {
        return result;
    }
    do {
        while (node != NULL) {
            node_with_flag.first = node;
            node_with_flag.second = 'L';
            s.push(node_with_flag);
            node = node-&gt;left;
        }
        bool is_continue = true;
        while (is_continue &amp;&amp; !s.empty()) {
            node_with_flag = s.top();
            node = node_with_flag.first;
            s.pop();
            if (node_with_flag.second == 'L') {
                node_with_flag.second = 'R';
                s.push(node_with_flag);
                is_continue = false;
                node = node-&gt;right;
            } else {
                result.push_back(node-&gt;val);
            }
        }
    } while (!s.empty());
    return result;
}
</code></pre>

<p>};
```</p>

<h3>按层遍历</h3>

<p>开头列的几道leetcode的题，后面三道都属于按层遍历，解法一样，我用一个队列用于存放要访问的节点，和两个数（一个记录当前层需要访问多少个节点，一个记录下一层需要访问的节点数）来解决。</p>

<p><a href="http://oj.leetcode.com/problems/binary-tree-level-order-traversal/">Binary Tree Level Order Traversal</a>，我的解法如下：</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>vector&lt;vector&lt;int&gt; &gt; levelOrder(TreeNode *root) {
    vector&lt;vector&lt;int&gt;&gt; result;
    queue&lt;TreeNode *&gt; q;
    int curr_level_node_count = 0;
    int next_level_node_count = 0;
    if (root != NULL) {
        curr_level_node_count = 1;
        q.push(root);
    }
    while (!q.empty()) {
        next_level_node_count = 0;
        vector&lt;int&gt; curr_level_value;
        while (curr_level_node_count--) {
            root = q.front();
            q.pop();
            if (root-&gt;left) {
                q.push(root-&gt;left);
                next_level_node_count++;
            }
            if (root-&gt;right) {
                q.push(root-&gt;right);
                next_level_node_count++;
            }
            curr_level_value.push_back(root-&gt;val);
        }
        result.push_back(curr_level_value);
        curr_level_node_count = next_level_node_count;
    }
    return result;
}
</code></pre>

<p>};
```</p>

<p><a href="http://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/">Binary Tree Level Order Traversal II</a>，只需要将Binary Tree Level Order Traversal的结果在返回前将其反转就行了。</p>

<p><code>cpp
// add before return statement
reverse(result.begin(), result.end());
</code></p>

<p><a href="http://oj.leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">Binary Tree Zigzag Level Order Traversal</a>，则是将Binary Tree Level Order Traversal的结果在返回前隔层反转就行了。</p>

<p>```cpp
// add before return statement
for (int i = 0; i &lt; result.size(); i++) {</p>

<pre><code>if (i % 2 == 1) {
    reverse(result[i].begin(), result[i].end());
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
