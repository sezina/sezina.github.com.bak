<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LeetCode | Sezina]]></title>
  <link href="http://sezina.github.com/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://sezina.github.com/"/>
  <updated>2013-12-08T15:38:00+08:00</updated>
  <id>http://sezina.github.com/</id>
  <author>
    <name><![CDATA[Sezina]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Remove Element]]></title>
    <link href="http://sezina.github.com/blog/2013/11/10/leetcode-remove-element/"/>
    <updated>2013-11-10T08:45:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/10/leetcode-remove-element</id>
    <content type="html"><![CDATA[<p>原题：</p>

<pre><code>Given an array and a value, remove all instances of that value in place and return the new length.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.
</code></pre>

<p>中文大意：</p>

<pre><code>给定一个数组和一个数，移除该数组中所有等于这个数的元素并返回删除元素后数组的长度。

数组中元素的顺序可以改变，超出新长度的部分数组的值为什么都可以。
</code></pre>

<p>需要注意的是，数组一直是那个数组，返回的是新数组的长度，也就是说下标小于新长度的数组元素必须是保存了数组删除了特定数后剩余的所有元素。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int removeElement(int A[], int n, int elem) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    int del_count = 0;
    for (int i = 0; i &lt; n; ++i)
    {
        if (A[i] == elem)
        {
            del_count++;
        } else {
            A[i - del_count] = A[i];
        }
    }
    return n - del_count;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Remove Duplicates from Sorted Array]]></title>
    <link href="http://sezina.github.com/blog/2013/11/05/leetcode-remove-duplicates-from-sorted-array/"/>
    <updated>2013-11-05T13:52:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/05/leetcode-remove-duplicates-from-sorted-array</id>
    <content type="html"><![CDATA[<p>原题：</p>

<pre><code>Given a sorted array, remove the duplicates in place such that each element appear 
only once and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

For example,

Given input array A = [1,1,2],

Your function should return length = 2, and A is now [1,2].
</code></pre>

<p>中文大意是：</p>

<pre><code>给定一个排好序的数组，移除所有重复的元素，使得所有元素在数组中只出现一次，不允许使用额外的数组。

例如，
输入为 A ＝ [1, 1, 2]
输出是 2 (去重后数组的长度)
</code></pre>

<p>这道题在原数组上做操作，比如给出的例子操作后变为了<code>A = [1, 2, 2]</code>(赋值)或是<code>A = [1, 2, 1]</code>(交换)，只是返回长度为2.</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int removeDuplicates(int A[], int n) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    if (n == 0) {
        return 0;
    }
    int new_len = 1;
    for (int i = 1; i &lt; n; i++) {
        if (A[i] != A[new_len - 1]) {
            A[new_len++] = A[i];
        }
    }
    return new_len;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Single Number]]></title>
    <link href="http://sezina.github.com/blog/2013/11/05/leetcode-single-number/"/>
    <updated>2013-11-05T09:25:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/05/leetcode-single-number</id>
    <content type="html"><![CDATA[<p>英文原题：</p>

<pre><code>Given an array of integers, every element appears twice except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. 
Could you implement it without using extra memory?
</code></pre>

<p>中文大意：</p>

<pre><code>给定一个由整数组成的数组，除了一个数之外其他的元素都出现了两次。请找出这个单独的数。

注意：
你的算法的时间复杂度要是线性的。你是否能够不用额外的存储空间解决这个问题？
</code></pre>

<p>第一次看到这题，看完第一句的时候估计不少人瞬间就有了解法然后，然后看完“注意”后，傻眼了。
这道题用到了数在计算机中的表示及位运算。一个数与其自身做异或操作<code>^</code>等于0！利用这个特性，将数组中所有元素进行异或操作，最后的结果就是那个单独的数字。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int singleNumber(int A[], int n) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    for (int i = 1; i &lt; n; i++) {
        A[0] ^= A[i];
    }
    return A[0];
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Reverse Integer]]></title>
    <link href="http://sezina.github.com/blog/2013/11/05/leetcode-reverse-integer/"/>
    <updated>2013-11-05T09:11:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/05/leetcode-reverse-integer</id>
    <content type="html"><![CDATA[<p>原题：</p>

<pre><code>Reverse digits of an integer.

Example1: x = 123, return 321
Example2: x = -123, return -321


Have you thought about this?
Here are some good questions to ask before coding.
Bonus points for you if you have already thought through this!

If the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.

Did you notice that the reversed integer might overflow? Assume the input 
is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?

Throw an exception? Good, but what if throwing an exception is not an option? 
You would then have to re-design the function (ie, add an extra parameter).
</code></pre>

<p>中文大意是：</p>

<pre><code>反转给定的整数。

如果考虑了以下问题有加分。
当给定的整数末尾为0的情况。
给定的整数在32位int范围内，但反转后会溢出的情况，如1000000003反转后就会溢出。

抛出异常来处理？好，但如果抛出异常不是我们希望的做法呢？你将要重新设计函数。
</code></pre>

<p>说实在的我没搞懂这道题要考察什么，如果说是那两种意外情况，那只需声明一个long long类型的变量就搞定了。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int reverse(int x) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    long long result = 0;
    while (x) {
        result = result * 10 + (x % 10);
        x /= 10;
    }

    return result;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Add Two Numbers]]></title>
    <link href="http://sezina.github.com/blog/2013/11/01/leetcode-add-two-numbers/"/>
    <updated>2013-11-01T16:46:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/01/leetcode-add-two-numbers</id>
    <content type="html"><![CDATA[<p>又来了一道a＋b的题目。</p>

<p>英文原题：</p>

<pre><code>  You are given two linked lists representing two 
non－negative numbers. The digits are stored in reverse
order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.

**Input**: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)
**Output**: 7 -&gt; 0 -&gt; 8
</code></pre>

<p>大意是：</p>

<pre><code>给定两个用链表表示的非负数，这两个数为逆序存储（即个位-&gt;十位-&gt;百位这样存储），
数字的每一位用一个节点表示，求和后将和以同样的方式组织并返回。
</code></pre>

<p>这道题是考察基本的指针链表，非常简单。</p>

<p>```cpp
/<em><em>
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode </em>next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 </em>/
class Solution {
public:</p>

<pre><code>ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    int carry = 0;
    int temp_sum = 0;
    ListNode *result_l = NULL, *last_one;
    while (l1 != NULL &amp;&amp; l2 != NULL) {
        temp_sum = l1-&gt;val + l2-&gt;val + carry;
        if (temp_sum &gt; 9) {
            carry = 1;
            temp_sum -= 10;
        } else {
            carry = 0;
        }
        if (result_l == NULL) {
            result_l = last_one = new ListNode(temp_sum);
        } else {
            last_one-&gt;next = new ListNode(temp_sum);
            last_one = last_one-&gt;next;
        }
        l1 = l1-&gt;next;
        l2 = l2-&gt;next;
    }

    ListNode *copy_l;
    if (l1 != NULL) {
        copy_l = l1;
    } else {
        copy_l = l2;
    }

    while (copy_l != NULL) {
        temp_sum = copy_l-&gt;val + carry;;
        if (temp_sum &gt; 9) {
            carry = 1;
            temp_sum -= 10;
        } else {
            carry = 0;
        }
        last_one-&gt;next = new ListNode(temp_sum);
        last_one = last_one-&gt;next;
        copy_l = copy_l-&gt;next;
    }

    if (carry) {
        last_one-&gt;next = new ListNode(carry);
    }
    return result_l;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
</feed>
