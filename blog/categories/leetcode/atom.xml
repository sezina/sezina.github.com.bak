<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LeetCode | Sezina]]></title>
  <link href="http://sezina.github.com/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://sezina.github.com/"/>
  <updated>2014-03-08T17:11:22+08:00</updated>
  <id>http://sezina.github.com/</id>
  <author>
    <name><![CDATA[Sezina]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[几种遍历二叉树的方法]]></title>
    <link href="http://sezina.github.com/blog/2014/02/15/several-ways-to-traverse-a-binary-tree/"/>
    <updated>2014-02-15T19:05:00+08:00</updated>
    <id>http://sezina.github.com/blog/2014/02/15/several-ways-to-traverse-a-binary-tree</id>
    <content type="html"><![CDATA[<p>遍历二叉树是学习算法与数据结构必学的内容，在leetcode网站上有好几道相关的题，本文也是从那里引出的：</p>

<ol>
<li><a href="http://oj.leetcode.com/problems/binary-tree-preorder-traversal/">Binary Tree Preorder Traversal </a></li>
<li><a href="http://oj.leetcode.com/problems/binary-tree-inorder-traversal/">Binary Tree Inorder Traversal</a></li>
<li><a href="http://oj.leetcode.com/problems/binary-tree-postorder-traversal/">Binary Tree Postorder Traversal</a></li>
<li><a href="http://oj.leetcode.com/problems/binary-tree-level-order-traversal/">Binary Tree Level Order Traversal</a></li>
<li><a href="http://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/">Binary Tree Level Order Traversal II</a></li>
<li><a href="http://oj.leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">Binary Tree Zigzag Level Order Traversal</a></li>
</ol>


<p>以上就是leetcode上相关的题目。二叉树的先序、中序和后序遍历(对应上面的1，2，3)的递归实现非常简单。如下：</p>

<p>```cpp
void preorder(TreeNode *root)
{</p>

<pre><code>visit(root);
preorder(root-&gt;left);
preorder(root-&gt;right);
</code></pre>

<p>}</p>

<p>void inorder(TreeNode *root)
{</p>

<pre><code>inorder(root-&gt;left);
visit(root);
inorder(root-&gt;right);
</code></pre>

<p>}</p>

<p>void postorder(TreeNode *root)
{</p>

<pre><code>postorder(root-&gt;left);
postorder(root-&gt;right);
visit(root);
</code></pre>

<p>}
```</p>

<p>简单明了。但它们的迭代实现却要写上好几倍的代码。
下面根据leetcode的那几道题说说几种遍历方法的迭代实现。</p>

<h3>先序遍历的迭代实现</h3>

<p>从其递归实现中，可以清晰的找到迭代实现的思路：访问跟节点，再访问左子结点，访问完左子结点后再访问右子结点。因此，我们需要一个栈来保存右子结点。其实现比较简单，如下：</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>vector&lt;int&gt; preorderTraversal(TreeNode *root) {
    stack&lt;TreeNode*&gt; tn_stack;
    if (root != NULL) {
        tn_stack.push(root);
    }

    vector&lt;int&gt; result;
    while (!tn_stack.empty()) {
        root = tn_stack.top();
        tn_stack.pop();
        result.push_back(root-&gt;val);
        if (root-&gt;right != NULL) {
            tn_stack.push(root-&gt;right);
        }
        if (root-&gt;left != NULL) {
            tn_stack.push(root-&gt;left);
        }

    }
    return result;
}
</code></pre>

<p>};
```</p>

<h3>中序遍历的迭代实现</h3>

<p>中序遍历的迭代实现和先序的有些类似。1. 先将所有左子结点（包括最开始的根节点）入栈，2. 访问栈顶元素，3. 然后又将栈顶元素的右子结点入栈，重复1。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>vector&lt;int&gt; inorderTraversal(TreeNode *root) {
    vector&lt;int&gt; result;
    stack&lt;TreeNode*&gt; tn_stack;
    while (root != NULL || !tn_stack.empty()) {
        while (root != NULL) {
            tn_stack.push(root);
            root = root-&gt;left;
        }
        if (!tn_stack.empty()) {
            root = tn_stack.top();
            tn_stack.pop();
            result.push_back(root-&gt;val);
            root = root-&gt;right;
        }

    }
    return result;
}
</code></pre>

<p>};
```</p>

<h3>后序遍历的迭代实现</h3>

<p>后序遍历的迭代实现有点麻烦。这里需要为每个节点添加一个标记位，用于标识访问了左子结点还是右子结点，且每个节点需要入栈两次。我用个例子说明一下吧。</p>

<p>假设我们有如下的一颗二叉树：</p>

<p>```bash</p>

<h1>tree</h1>

<pre><code> 1 
/  \ 
</code></pre>

<p>   /    \
  2      3
 / \    / \
4   5  6   7
```</p>

<p>其后序遍历的结果应为<code>4526731</code>。我们用一个栈保存添加了标志位的节点。依旧是所有左节点都需要入栈。先将<code>124</code>入栈：</p>

<p><code>bash
[&lt;1, L&gt;, &lt;2, L&gt;, &lt;4, L&gt;]
</code></p>

<p>这个时候左子结点已经为NULL了，我们需要读栈了，将栈顶pop出来，即<code>&lt;4, L&gt;</code>。我们发现其标志位为<code>L</code>，现在将它置为<code>R</code>，并重新入栈，同时拿到它的右子结点，<code>4</code>的右子结点为<code>NULL</code>，所以这个时候再次读栈顶，得<code>&lt;4, R&gt;</code>，由于标志位为<code>R</code>，所以访问该节点。读下一个栈顶元素<code>&lt;2, L&gt;</code>，置标志位为<code>R</code>，重新入栈，得到其右子结点<code>5</code>，将该节点入栈<code>&lt;5, L&gt;</code>，将节点<code>5</code>得所有左子结点入栈。</p>

<p>重复做这种置标志位，入栈，重置标志位，入栈，当标识位位<code>R</code>时访问得操作，最终后序遍历完整棵树。</p>

<p>例子的栈的变化如下</p>

<p><code>bash
[&lt;1, L&gt;]
[&lt;1, L&gt;, &lt;2, L&gt;]
[&lt;1, L&gt;, &lt;2, L&gt;, &lt;4, L&gt;]
[&lt;1, L&gt;, &lt;2, L&gt;, &lt;4, R&gt;]
[&lt;1, L&gt;, &lt;2, L&gt;]
[&lt;1, L&gt;, &lt;2, R&gt;]
[&lt;1, L&gt;, &lt;2, R&gt;, &lt;5, L&gt;]
[&lt;1, L&gt;, &lt;2, R&gt;, &lt;5, R&gt;]
[&lt;1, L&gt;, &lt;2, R&gt;]
[&lt;1, L&gt;]
[&lt;1, R&gt;]
[&lt;1, R&gt;, &lt;3, L&gt;, &lt;6, L&gt;]
[&lt;1, R&gt;, &lt;3, L&gt;, &lt;6, R&gt;]
[&lt;1, R&gt;, &lt;3, L&gt;]
[&lt;1, R&gt;, &lt;3, R&gt;]
[&lt;1, R&gt;, &lt;3, R&gt;, &lt;7, L&gt;]
[&lt;1, R&gt;, &lt;3, R&gt;, &lt;7, R&gt;]
[&lt;1, R&gt;, &lt;3, R&gt;]
[&lt;1, R&gt;]
[]
</code></p>

<p>实现如下：</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>vector&lt;int&gt; postorderTraversal(TreeNode *root) {
    pair&lt;TreeNode *, char&gt; node_with_flag;
    stack&lt;pair&lt;TreeNode *, char&gt;&gt; s;
    vector&lt;int&gt; result;
    TreeNode *node = root;
    if (root == NULL) {
        return result;
    }
    do {
        while (node != NULL) {
            node_with_flag.first = node;
            node_with_flag.second = 'L';
            s.push(node_with_flag);
            node = node-&gt;left;
        }
        bool is_continue = true;
        while (is_continue &amp;&amp; !s.empty()) {
            node_with_flag = s.top();
            node = node_with_flag.first;
            s.pop();
            if (node_with_flag.second == 'L') {
                node_with_flag.second = 'R';
                s.push(node_with_flag);
                is_continue = false;
                node = node-&gt;right;
            } else {
                result.push_back(node-&gt;val);
            }
        }
    } while (!s.empty());
    return result;
}
</code></pre>

<p>};
```</p>

<h3>按层遍历</h3>

<p>开头列的几道leetcode的题，后面三道都属于按层遍历，解法一样，我用一个队列用于存放要访问的节点，和两个数（一个记录当前层需要访问多少个节点，一个记录下一层需要访问的节点数）来解决。</p>

<p><a href="http://oj.leetcode.com/problems/binary-tree-level-order-traversal/">Binary Tree Level Order Traversal</a>，我的解法如下：</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>vector&lt;vector&lt;int&gt; &gt; levelOrder(TreeNode *root) {
    vector&lt;vector&lt;int&gt;&gt; result;
    queue&lt;TreeNode *&gt; q;
    int curr_level_node_count = 0;
    int next_level_node_count = 0;
    if (root != NULL) {
        curr_level_node_count = 1;
        q.push(root);
    }
    while (!q.empty()) {
        next_level_node_count = 0;
        vector&lt;int&gt; curr_level_value;
        while (curr_level_node_count--) {
            root = q.front();
            q.pop();
            if (root-&gt;left) {
                q.push(root-&gt;left);
                next_level_node_count++;
            }
            if (root-&gt;right) {
                q.push(root-&gt;right);
                next_level_node_count++;
            }
            curr_level_value.push_back(root-&gt;val);
        }
        result.push_back(curr_level_value);
        curr_level_node_count = next_level_node_count;
    }
    return result;
}
</code></pre>

<p>};
```</p>

<p><a href="http://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/">Binary Tree Level Order Traversal II</a>，只需要将Binary Tree Level Order Traversal的结果在返回前将其反转就行了。</p>

<p><code>cpp
// add before return statement
reverse(result.begin(), result.end());
</code></p>

<p><a href="http://oj.leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">Binary Tree Zigzag Level Order Traversal</a>，则是将Binary Tree Level Order Traversal的结果在返回前隔层反转就行了。</p>

<p>```cpp
// add before return statement
for (int i = 0; i &lt; result.size(); i++) {</p>

<pre><code>if (i % 2 == 1) {
    reverse(result[i].begin(), result[i].end());
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Single Number 2]]></title>
    <link href="http://sezina.github.com/blog/2014/01/26/leetcode-single-number-2/"/>
    <updated>2014-01-26T08:49:00+08:00</updated>
    <id>http://sezina.github.com/blog/2014/01/26/leetcode-single-number-2</id>
    <content type="html"><![CDATA[<p><a href="http://oj.leetcode.com/problems/single-number-ii/">OJ地址</a></p>

<p>英文原题：</p>

<pre><code>Given an array of integers, every element appears three times except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. 
Could you implement it without using extra memory?
</code></pre>

<p>中文大意：</p>

<pre><code>给定一个由整数组成的数组，除了一个数之外其他的元素都出现了三次。请找出这个单独的数。

注意：
你的算法的时间复杂度要是线性的。你是否能够不用额外的存储空间解决这个问题？
</code></pre>

<p>有了上一道 <a href="http://sezina.github.io/blog/2013/11/05/leetcode-single-number/">Single Number</a> 的练习，一看到这道题基本可以确定这道题也要用位运算来解答。</p>

<p>直观的解法就是使用一个<code>count[32]</code>的数组保存各位出现<code>1</code>的次数然后进行<code>mod 3</code>操作。除了一个单独的数外，其他数都出现了三次，那么，我们将所有数写成二进制位表示后，对每一位在所有的数中出现<code>1</code>的次数进行统计，会发现每位出现<code>1</code>的次数要么是3的倍数，要么就是模3余1，对统计结果进行<code>mod 3</code>，结果得<code>0</code>或<code>1</code>，然后将这些<code>0</code>和<code>1</code>对应回相应位置就是结果了。</p>

<p>如<code>1010</code>、<code>1100</code>、<code>1010</code>、<code>1010</code>四个数，统计结果是：第一位出现<code>1</code>的次数是0，第二位是3次，第三位是1次，第四位是4次，即<code>count[] = {0, 3, 1, 4}</code>，<code>mod 3</code>后得<code>count[] = {0, 0, 1, 1}</code>，所以结果是<code>1100</code>。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int singleNumber(int A[], int n) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    int count[32] = {0};
    int result = 0;
    for (int i = 0; i &lt; 32; i++) {
        for (int j = 0; j &lt; n; j++) {
            if ((A[j] &gt;&gt; i) &amp; 1) {
                count[i]++;
            }
        }
        result |= ((count[i] % 3) &lt;&lt; i);
    }
    return result;
}
</code></pre>

<p>};
```</p>

<p>另外一种解法是非常有技巧性的解法，运作原理类似于三进制加法，即遇三清零。位操作只能用二进制来做，所以这里就用二进制来模拟三进制加法。这里需要3条规则：</p>

<ol>
<li>ones用于记录前一解法中<code>mod 3</code>得1的数位；</li>
<li>twos用于记录前一解法中<code>mod 3</code>得2的数位；</li>
<li>当ones和twos相同的数位都为<code>1</code>时，说明该位上1出现了3次，清零。</li>
</ol>


<p>通过这三条规则计算后，最后的ones即是结果。
最后的解法如下：</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int singleNumber(int A[], int n) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    int ones = 0, twos = 0, threes = 0;
    for (int i = 0; i &lt; n; i++) {
        twos |= A[i] &amp; ones;
        ones ^= A[i];
        threes = ~(ones &amp; twos);
        ones &amp;= threes;
        twos &amp;= threes;
    }
    return ones;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Remove Element]]></title>
    <link href="http://sezina.github.com/blog/2013/11/10/leetcode-remove-element/"/>
    <updated>2013-11-10T08:45:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/10/leetcode-remove-element</id>
    <content type="html"><![CDATA[<p>原题：</p>

<pre><code>Given an array and a value, remove all instances of that value in place and return the new length.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.
</code></pre>

<p>中文大意：</p>

<pre><code>给定一个数组和一个数，移除该数组中所有等于这个数的元素并返回删除元素后数组的长度。

数组中元素的顺序可以改变，超出新长度的部分数组的值为什么都可以。
</code></pre>

<p>需要注意的是，数组一直是那个数组，返回的是新数组的长度，也就是说下标小于新长度的数组元素必须是保存了数组删除了特定数后剩余的所有元素。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int removeElement(int A[], int n, int elem) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    int del_count = 0;
    for (int i = 0; i &lt; n; ++i)
    {
        if (A[i] == elem)
        {
            del_count++;
        } else {
            A[i - del_count] = A[i];
        }
    }
    return n - del_count;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Remove Duplicates from Sorted Array]]></title>
    <link href="http://sezina.github.com/blog/2013/11/05/leetcode-remove-duplicates-from-sorted-array/"/>
    <updated>2013-11-05T13:52:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/05/leetcode-remove-duplicates-from-sorted-array</id>
    <content type="html"><![CDATA[<p>原题：</p>

<pre><code>Given a sorted array, remove the duplicates in place such that each element appear 
only once and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

For example,

Given input array A = [1,1,2],

Your function should return length = 2, and A is now [1,2].
</code></pre>

<p>中文大意是：</p>

<pre><code>给定一个排好序的数组，移除所有重复的元素，使得所有元素在数组中只出现一次，不允许使用额外的数组。

例如，
输入为 A ＝ [1, 1, 2]
输出是 2 (去重后数组的长度)
</code></pre>

<p>这道题在原数组上做操作，比如给出的例子操作后变为了<code>A = [1, 2, 2]</code>(赋值)或是<code>A = [1, 2, 1]</code>(交换)，只是返回长度为2.</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int removeDuplicates(int A[], int n) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    if (n == 0) {
        return 0;
    }
    int new_len = 1;
    for (int i = 1; i &lt; n; i++) {
        if (A[i] != A[new_len - 1]) {
            A[new_len++] = A[i];
        }
    }
    return new_len;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Single Number]]></title>
    <link href="http://sezina.github.com/blog/2013/11/05/leetcode-single-number/"/>
    <updated>2013-11-05T09:25:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/05/leetcode-single-number</id>
    <content type="html"><![CDATA[<p>英文原题：</p>

<pre><code>Given an array of integers, every element appears twice except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. 
Could you implement it without using extra memory?
</code></pre>

<p>中文大意：</p>

<pre><code>给定一个由整数组成的数组，除了一个数之外其他的元素都出现了两次。请找出这个单独的数。

注意：
你的算法的时间复杂度要是线性的。你是否能够不用额外的存储空间解决这个问题？
</code></pre>

<p>第一次看到这题，看完第一句的时候估计不少人瞬间就有了解法然后，然后看完“注意”后，傻眼了。
这道题用到了数在计算机中的表示及位运算。一个数与其自身做异或操作<code>^</code>等于0！利用这个特性，将数组中所有元素进行异或操作，最后的结果就是那个单独的数字。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int singleNumber(int A[], int n) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    for (int i = 1; i &lt; n; i++) {
        A[0] ^= A[i];
    }
    return A[0];
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
</feed>
