<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LeetCode | Sezina]]></title>
  <link href="http://sezina.github.com/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://sezina.github.com/"/>
  <updated>2013-11-05T12:28:23+08:00</updated>
  <id>http://sezina.github.com/</id>
  <author>
    <name><![CDATA[Sezina]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Single Number]]></title>
    <link href="http://sezina.github.com/blog/2013/11/05/leetcode-single-number/"/>
    <updated>2013-11-05T09:25:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/05/leetcode-single-number</id>
    <content type="html"><![CDATA[<p>英文原题：</p>

<pre><code>Given an array of integers, every element appears twice except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. 
Could you implement it without using extra memory?
</code></pre>

<p>中文大意：</p>

<pre><code>给定一个由整数组成的数组，除了一个数之外其他的元素都出现了两次。请找出这个单独的数。

注意：
你的算法的时间复杂度要是线性的。你是否能够不用额外的存储空间解决这个问题？
</code></pre>

<p>第一次看到这题，看完第一句的时候估计不少人瞬间就有了解法然后，然后看完“注意”后，傻眼了。
这道题用到了数在计算机中的表示及位运算。一个数与其自身做异或操作<code>^</code>等于0！利用这个特性，将数组中所有元素进行异或操作，最后的结果就是那个单独的数字。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int singleNumber(int A[], int n) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    for (int i = 1; i &lt; n; i++) {
        A[0] ^= A[i];
    }
    return A[0];
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Reverse Integer]]></title>
    <link href="http://sezina.github.com/blog/2013/11/05/leetcode-reverse-integer/"/>
    <updated>2013-11-05T09:11:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/05/leetcode-reverse-integer</id>
    <content type="html"><![CDATA[<p>原题：</p>

<pre><code>Reverse digits of an integer.

Example1: x = 123, return 321
Example2: x = -123, return -321


Have you thought about this?
Here are some good questions to ask before coding.
Bonus points for you if you have already thought through this!

If the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.

Did you notice that the reversed integer might overflow? Assume the input 
is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?

Throw an exception? Good, but what if throwing an exception is not an option? 
You would then have to re-design the function (ie, add an extra parameter).
</code></pre>

<p>中文大意是：</p>

<pre><code>反转给定的整数。

如果考虑了以下问题有加分。
当给定的整数末尾为0的情况。
给定的整数在32位int范围内，但反转后会溢出的情况，如1000000003反转后就会溢出。

抛出异常来处理？好，但如果抛出异常不是我们希望的做法呢？你将要重新设计函数。
</code></pre>

<p>说实在的我没搞懂这道题要考察什么，如果说是那两种意外情况，那只需声明一个long long类型的变量就搞定了。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>int reverse(int x) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    long long result = 0;
    while (x) {
        result = result * 10 + (x % 10);
        x /= 10;
    }

    return result;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Add Two Numbers]]></title>
    <link href="http://sezina.github.com/blog/2013/11/01/leetcode-add-two-numbers/"/>
    <updated>2013-11-01T16:46:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/11/01/leetcode-add-two-numbers</id>
    <content type="html"><![CDATA[<p>又来了一道a＋b的题目。</p>

<p>英文原题：</p>

<pre><code>  You are given two linked lists representing two 
non－negative numbers. The digits are stored in reverse
order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.

**Input**: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)
**Output**: 7 -&gt; 0 -&gt; 8
</code></pre>

<p>大意是：</p>

<pre><code>给定两个用链表表示的非负数，这两个数为逆序存储（即个位-&gt;十位-&gt;百位这样存储），
数字的每一位用一个节点表示，求和后将和以同样的方式组织并返回。
</code></pre>

<p>这道题是考察基本的指针链表，非常简单。</p>

<p>```cpp
/<em><em>
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode </em>next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 </em>/
class Solution {
public:</p>

<pre><code>ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    int carry = 0;
    int temp_sum = 0;
    ListNode *result_l = NULL, *last_one;
    while (l1 != NULL &amp;&amp; l2 != NULL) {
        temp_sum = l1-&gt;val + l2-&gt;val + carry;
        if (temp_sum &gt; 9) {
            carry = 1;
            temp_sum -= 10;
        } else {
            carry = 0;
        }
        if (result_l == NULL) {
            result_l = last_one = new ListNode(temp_sum);
        } else {
            last_one-&gt;next = new ListNode(temp_sum);
            last_one = last_one-&gt;next;
        }
        l1 = l1-&gt;next;
        l2 = l2-&gt;next;
    }

    ListNode *copy_l;
    if (l1 != NULL) {
        copy_l = l1;
    } else {
        copy_l = l2;
    }

    while (copy_l != NULL) {
        temp_sum = copy_l-&gt;val + carry;;
        if (temp_sum &gt; 9) {
            carry = 1;
            temp_sum -= 10;
        } else {
            carry = 0;
        }
        last_one-&gt;next = new ListNode(temp_sum);
        last_one = last_one-&gt;next;
        copy_l = copy_l-&gt;next;
    }

    if (carry) {
        last_one-&gt;next = new ListNode(carry);
    }
    return result_l;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode --- Two Sum]]></title>
    <link href="http://sezina.github.com/blog/2013/10/31/leetcode-two-sum/"/>
    <updated>2013-10-31T13:04:00+08:00</updated>
    <id>http://sezina.github.com/blog/2013/10/31/leetcode-two-sum</id>
    <content type="html"><![CDATA[<p>昨日惊闻LeetCode这东西，听说上面的OJ都是些面试题，又据说是去北美找工作的人都会上去刷刷题，于是带着作为技术人对硅谷无比向往的心情注册了个号开刷，准备在接下来的这一段上算法课时间里把它刷完（一个美好的愿景）。</p>

<p>首先，上一道和所有OJ的第一道a＋b一样的题：</p>

<pre><code>  Given an array of integers, find two numbers such
that they add up to a specific target number.
  The function twoSum should return indices of the
two numbers such that they add up to the target,
where index1 must be less than index2. Please note
that your returned answers (both index1 and index2)
are not zero-based.
  You may assume that each input would have exactly
one solution.

**Input**: numbers={2, 7, 11, 15}, target=9
**Output**: index1=1, index2=2
</code></pre>

<p>中文意思就是：</p>

<pre><code>给定一个数列，找到两个数，它们相加刚好等于给定的target的值。
函数twoSum 应该返回这两个数的下标indx1和index2，且要求index1 &lt; index2，注意，这里的下标不是从0开始的。

**示例输入**：numbers={2, 7, 11, 15}, target=9
**示例输出**：index1=1, index2=2
</code></pre>

<p>看完题意简单吧，就是a＋b的问题。我直接写了两个for循环对数组进行循环判断。下面是我的C++实现。</p>

<p>```cpp
class Solution {
public:</p>

<pre><code>vector&lt;int&gt; twoSum(vector&lt;int&gt; &amp;numbers, int target) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    vector&lt;int&gt; result;
    for (int i = 0; i &lt; numbers.size(); i++) {
        for (int j = i + 1; numbers[i] &lt;= target &amp;&amp; j &lt; numbers.size(); j++) {
            if (numbers[j] &lt;= target &amp;&amp; numbers[i] + numbers[j] == target) {
                result.push_back(i + 1);
                result.push_back(j + 1);
                break;
            }
        }
    }
    return result;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
</feed>
